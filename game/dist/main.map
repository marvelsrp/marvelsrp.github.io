{"version":3,"file":"main.bundle.js","sources":["webpack:///./src/main.browser.ts","webpack:///./src/app/app.service.ts","webpack:///./src/app/game/entities/vector.ts","webpack:///./src/app/game/entities/food.ts","webpack:///./src/app/game/entities/world.ts","webpack:///./src/app/game/entities/creature.ts","webpack:///./src/app/app.routes.ts","webpack:///./src/app/game/entities/camera.ts","webpack:///./src/app/game/entities/patron.ts","webpack:///./src/app/game/entities/rectangle.ts","webpack:///./src/platform/browser-directives.ts","webpack:///./src/platform/browser-pipes.ts","webpack:///./src/platform/browser-providers.ts","webpack:///./src/app/app.component.ts","webpack:///./src/app/app.resolver.ts","webpack:///./src/app/game/entities/index.ts","webpack:///./src/app/game/game.component.ts","webpack:///./src/app/game/index.ts","webpack:///./src/app/home/home.component.ts","webpack:///./src/app/home/index.ts","webpack:///./src/app/index.ts","webpack:///./src/app/no-content/index.ts","webpack:///./src/app/no-content/no-content.ts","webpack:///./src/platform/browser.ts","webpack:///./src/platform/environment.ts","webpack:///./src/app/game/game.template.html","webpack:///./src/app/home/home.template.html","webpack:///./~/rxjs/add/observable/of.js","webpack:///./src/app/app.style.css","webpack:///./src/app/game/game.style.css","webpack:///./src/app/home/home.style.css"],"sourcesContent":["/*\n * Providers provided by Angular\n */\nimport { bootstrap } from '@angular/platform-browser-dynamic';\n/*\n* Platform and Environment\n* our providers/directives/pipes\n*/\nimport { PLATFORM_PROVIDERS } from './platform/browser';\nimport { ENV_PROVIDERS, decorateComponentRef } from './platform/environment';\n\n\n/*\n* App Component\n* our top level component that holds all of our components\n*/\nimport { App, APP_PROVIDERS } from './app';\n\n/*\n * Bootstrap our Angular app with a top level component `App` and inject\n * our Services and Providers into Angular's dependency injection\n */\nexport function main(initialHmrState?: any): Promise<any> {\n\n  return bootstrap(App, [\n    // To add more vendor providers please look in the platform/ folder\n    ...PLATFORM_PROVIDERS,\n    ...ENV_PROVIDERS,\n    ...APP_PROVIDERS,\n  ])\n  .then(decorateComponentRef)\n  .catch(err => console.error(err));\n\n}\n\n\n\n\n\n/*\n * Vendors\n * For vendors for example jQuery, Lodash, angular2-jwt just import them anywhere in your app\n * You can also import them in vendors to ensure that they are bundled in one file\n * Also see custom-typings.d.ts as you also need to do `typings install x` where `x` is your module\n */\n\n\n/*\n * Hot Module Reload\n * experimental version by @gdi2290\n */\nif ('development' === ENV && HMR === true) {\n  // activate hot module reload\n  let ngHmr = require('angular2-hmr');\n  ngHmr.hotModuleReplacement(main, module);\n} else {\n  // bootstrap when document is ready\n  document.addEventListener('DOMContentLoaded', () => main());\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/main.browser.ts\n **/","import { Injectable } from '@angular/core';\nimport { HmrState } from 'angular2-hmr';\n\n@Injectable()\nexport class AppState {\n  // @HmrState() is used by HMR to track the state of any object during HMR (hot module replacement)\n  @HmrState() _state = { };\n\n  constructor() {\n\n  }\n\n  // already return a clone of the current state\n  get state() {\n    return this._state = this._clone(this._state);\n  }\n  // never allow mutation\n  set state(value) {\n    throw new Error('do not mutate the `.state` directly');\n  }\n\n  get(prop?: any) {\n    // use our state getter for the clone\n    const state = this.state;\n    return state.hasOwnProperty(prop) ? state[prop] : state;\n  }\n\n  set(prop: string, value: any) {\n    // internally mutate our state\n    return this._state[prop] = value;\n  }\n\n\n  _clone(object) {\n    // simple object clone\n    return JSON.parse(JSON.stringify( object ));\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.service.ts\n **/","export class Vector {\n\n  public x: number;\n  public y: number;\n\n  constructor(x: number, y: number) {\n    this.x = x;\n    this.y = y;\n  }\n\n  set(x, y) {\n      this.x = x;\n      this.y = y;\n\n      return this;\n  }\n\n  add(v) {\n      this.x += v.x;\n      this.y += v.y;\n\n      return this;\n  }\n\n  sub(v) {\n      this.x -= v.x;\n      this.y -= v.y;\n\n      return this;\n  }\n\n  mul(s){\n      this.x *= s;\n      this.y *= s;\n\n      return this;\n  }\n\n  div(s) {\n      !s && console.log(\"Division by zero!\");\n\n      this.x /= s;\n      this.y /= s;\n\n      return this;\n  }\n\n  mag(){\n    return Math.sqrt(this.x * this.x + this.y * this.y);\n  }\n\n  normalize() {\n    var mag = this.mag();\n    mag && this.div(mag);\n    return this;\n  }\n\n  angle() {\n    return Math.atan2(this.y, this.x);\n  }\n\n  setMag(m) {\n    var angle = this.angle();\n    this.x = m * Math.cos(angle);\n    this.y = m * Math.sin(angle);\n    return this;\n  }\n\n  setAngle(a) {\n    var mag = this.mag();\n    this.x = mag * Math.cos(a);\n    this.y = mag * Math.sin(a);\n    return this;\n  }\n\n  rotate(a) {\n      this.setAngle(this.angle() + a);\n      return this;\n  }\n\n  limit(l) {\n      var mag = this.mag();\n      if(mag > l)\n          this.setMag(l);\n      return this;\n  }\n\n  angleBetween(v) {\n      return this.angle() - v.angle();\n  }\n\n  dot(v) {\n      return this.x * v.x + this.y * v.y;\n  }\n\n  lerp(v, amt) {\n      this.x += (v.x - this.x) * amt;\n      this.y += (v.y - this.y) * amt;\n      return this;\n  }\n\n  dist(v) {\n      var dx = this.x - v.x;\n      var dy = this.y - v.y;\n      return Math.sqrt(dx * dx + dy * dy);\n  }\n\n  copy() {\n      return new Vector(this.x, this.y);\n  }\n\n  random(){\n      this.set(1,1);\n      this.setAngle(Math.random() * Math.PI * 2);\n      return this;\n  }\n\n  static inGradAngle(val) {\n    return val * 180 / Math.PI;\n  }\n\n  static inRadAngle(val) {\n    return val * Math.PI / 180;\n  }\n\n  static getAngleBeetween(velocity_2:Vector, position1:Vector, position2:Vector){\n      var angle = Vector.inGradAngle(Math.atan2(velocity_2.y, velocity_2.x));\n      var angle2 = Vector.inGradAngle(\n          Math.atan2(\n            position1.x - position2.x,\n            position1.y - position2.y\n          )\n      );\n\n      var angle_between = Math.abs(angle2-angle);\n      if (angle_between > 180)\n          angle_between -= 180;\n      return angle_between;\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/vector.ts\n **/","import { Vector } from './vector';\nimport { Creature } from './creature';\nimport { World } from './world';\n\nexport class Food {\n  public static list: Array<Food> = [];\n\n  public physics = {\n    location:  new Vector(0, 0),\n    mass: 1,\n    size: 700\n  };\n  public type: string;\n  public experience = 10;\n  public static counter = 0;\n  public creaturesTargeting: Array<Creature> = [];\n  public id;\n\n  constructor(type: string, coord:Vector) {\n    Food.counter++;\n    this.id = Food.counter;\n    this.type = type;\n    this.physics.location = coord;\n    let EXP = {\n      'circle': 30,\n      'triangle': 10,\n      'square': 50\n    };\n    this.experience = EXP[type];\n    let SIZES = {\n      'circle': 6,\n      'triangle': 6,\n      'square': 8\n    };\n    this.physics.size = SIZES[type];\n  }\n\n  public static add(){\n    let type = Math.round(Math.random() * 2);\n    let TYPES = ['circle', 'triangle', 'square'];\n    console.log('addFood', );\n    let food = new Food(TYPES[type], World.getRandomCoord());\n    Food.list.push(food);\n  }\n\n  public static kill(food: Food) {\n    food.clearTargeting();\n    let index = Food.list.findIndex((item) => {\n      return food.id === item.id;\n    });\n    Food.list.splice(index, 1);\n\n    //clear creature targets\n    let foundCreatures = Creature.list.filter((item) => {\n      return item.targetFood && food.id === item.targetFood.id;\n    });\n    foundCreatures.forEach((creature) => {\n      creature.targetFood = undefined;\n    });\n  }\n\n  public addTargeting(creature: Creature) {\n    this.creaturesTargeting.push(creature);\n  }\n\n  public clearTargeting(){\n    this.creaturesTargeting.forEach((creature) => {\n      creature.targetFood = undefined;\n    })\n  }\n\n  public draw() {\n    var context = World.context;\n\n    context.save();\n    context.beginPath();\n    context.lineWidth = 1;\n\n    switch(this.type){\n      case 'circle':\n        context.fillStyle = '#CCCCCC';\n        context.strokeStyle = '#000000';\n        context.arc(World.convertX(this.physics.location.x), World.convertY(this.physics.location.y), this.physics.size, 0, 2 * Math.PI, false);\n        break;\n      case 'triangle':\n        context.fillStyle = '#CCCCCC';\n        context.strokeStyle = '#000000';\n\n        context.moveTo(World.convertX(this.physics.location.x), World.convertY(this.physics.location.y - this.physics.size));\n        context.lineTo(World.convertX(this.physics.location.x - this.physics.size), World.convertY(this.physics.location.y + this.physics.size));\n        context.lineTo(World.convertX(this.physics.location.x + this.physics.size), World.convertY(this.physics.location.y + this.physics.size));\n        break;\n      case 'square':\n        context.fillStyle = '#CCCCCC';\n        context.strokeStyle = '#000000';\n        context.rect(World.convertX(this.physics.location.x - this.physics.size) , World.convertY(this.physics.location.y - this.physics.size), this.physics.size * 2, this.physics.size * 2);\n        break;\n    }\n    //bot\n    context.fill();\n\n    // context.fill();\n    context.closePath();\n    context.stroke();\n\n\n    context.globalAlpha = 1;\n    context.restore() ;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/food.ts\n **/","import { Vector } from './vector';\nimport { Creature } from './creature';\nimport { Food } from './food';\nimport { Camera } from './camera';\n\nexport class World {\n  public static context: CanvasRenderingContext2D;\n\n  private static countCreatures: number = 30;\n  private static countFoods: number = 30;\n\n  public static canvasWidth: number = window.innerWidth;\n  public static canvasHeight: number = window.innerHeight;\n\n  public static width: number = 2500;\n  public static height: number = 1500;\n\n  public static camera:Camera;\n  public static image:HTMLImageElement = new Image();\n\n  public static init() {\n    Creature.active = Creature.add(true);\n\n    World.camera = new Camera(0, 0, World.canvasWidth, World.canvasHeight, World.width, World.height);\n    World.camera.follow(Creature.active, World.canvasWidth/2, World.canvasHeight/2);\n\n    for (let i = 0; i < World.countCreatures; i++)\n      Creature.add();\n\n    for (let i = 0; i < World.countFoods; i++)\n      Food.add()\n  }\n\n  public static setContext(context: CanvasRenderingContext2D){\n    World.context = context;\n    World.image.src = context.canvas.toDataURL(\"image/png\");\n  }\n\n  public static getRandomCoord(){\n    let x = Math.random() * World.width;\n    let y = Math.random() * World.height;\n    return new Vector(x, y);\n  }\n\n  public static draw(){\n\n    World.context.fillStyle=\"#ffffff\";\n    World.context.fillRect(0, 0, World.canvasWidth, World.canvasHeight);\n\n    var rows = ~~(this.width/44) + 1;\n    var columns = ~~(this.height/44) + 1;\n\n    World.context.save();\n    World.context.fillStyle = '#CCCCCC';\n    World.context.strokeStyle = '#000000';\n\n    for (var x = 0, i = 0; i < rows; x+=44, i++) {\n      World.context.beginPath();\n      for (var y = 0, j=0; j < columns; y+=44, j++) {\n        World.context.rect (World.convertX(x), World.convertY(y), 40, 40);\n      }\n      World.context.fill();\n      World.context.closePath();\n    }\n\n    World.context.beginPath();\n      World.context.lineWidth = 3;\n      World.context.moveTo(World.convertX(World.width/2 - 20), World.convertY(World.height/2));\n      World.context.lineTo(World.convertX(World.width/2 + 20), World.convertY(World.height/2));\n      World.context.moveTo(World.convertX(World.width/2), World.convertY(World.height/2 - 20));\n      World.context.lineTo(World.convertX(World.width/2), World.convertY(World.height/2 + 20));\n    World.context.closePath();\n    World.context.stroke();\n\n    World.context.restore();\n\n    Food.list.forEach((food) => food.draw());\n    Creature.list.forEach((creature) => creature.process());\n\n\n    World.context.font=\"20px Tahome\";\n    World.context.fillStyle = 'black';\n    World.context.fillText(\"Expirience: \" + Creature.active.experience, 20, 20);\n    World.context.fillText(\"Level: \" + Creature.active.level, 20, 40);\n    World.context.fillText(\"Health: \" + Creature.active.health + '/' + Creature.active.maxHealth, 20, 60);\n    World.context.fillText(\"Location: \" + Math.round(Creature.active.physics.location.x) + ':'\n      + Math.round(Creature.active.physics.location.y), 20, 80);\n\n    let sx, sy, dx, dy;\n    let sWidth, sHeight, dWidth, dHeight;\n    sx = World.camera.xView;\n    sy = World.camera.yView;\n    sWidth =  World.context.canvas.width;\n    sHeight = World.context.canvas.height;\n    // if cropped image is smaller than canvas we need to change the source dimensions\n    if(World.image.width - sx < sWidth){\n      sWidth = World.image.width - sx;\n    }\n    if(World.image.height - sy < sHeight){\n      sHeight = World.image.height - sy;\n    }\n\n    // location on canvas to draw the croped image\n    dx = 0;\n    dy = 0;\n    // match destination with source to not scale the image\n    dWidth = sWidth;\n    dHeight = sHeight;;\n    World.context.drawImage(World.image, sx, sy, sWidth, sHeight, dx, dy, dWidth, dHeight);\n\n  }\n\n  static convert(x: number, y: number){\n    return [x - World.camera.xView, y - World.camera.yView];\n  }\n\n  static convertX(x: number){\n    return x - World.camera.xView;\n  }\n\n  static convertY(y: number){\n    return y - World.camera.yView;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/world.ts\n **/","import { Vector } from './vector';\nimport { World } from './world';\nimport { Food } from './food';\nimport { Patron } from './patron';\n\nconst KEYS = {\n  W: 87,\n  S: 83,\n  A: 65,\n  D: 68,\n  LEFT: 37,\n  UP: 38,\n  RIGHT: 39,\n  DOWN: 40,\n  SPACE: 32\n};\n\nexport class Creature {\n  public static list: Array<Creature> = [];\n  public static active: Creature;\n  public name: string;\n  public physics = {\n    location:  new Vector(0, 0),\n    velocity: new Vector(0, 0),\n    rotation: new Vector(0, 0),\n    acceleration: new Vector(0, 0),\n    mass: 1,\n    maxspeed: 5,\n    maxforce: 0.1,\n    lookRange: 700\n  };\n  public experience = 0;\n  public level = 1;\n  public health = 100;\n  public maxHealth = 100;\n  public patronInterval = 1/5;\n\n  public isPlayer: boolean;\n  public isBot: boolean;\n  public targetFood: Food;\n  public patrons: Array<Patron> = [];\n  public id;\n  public static counter = 0;\n  public static maxLevel = 20;\n\n  constructor(coord: Vector, isPlayer: boolean = false){\n    Creature.counter++;\n    this.id = Creature.counter;\n    this.name = \"bot-\" + this.id;\n    this.physics.location = coord;\n    this.physics.rotation.random();\n    this.isPlayer = isPlayer;\n    this.isBot = !isPlayer;\n  }\n\n  public damage(damage:number){\n    this.health -= damage;\n    let killed = this.health <= 0;\n    if (killed) {\n      Creature.kill(this);\n    }\n    return killed;\n  }\n\n  public static add(isPlayer:boolean = false){\n    let coord = (isPlayer) ? new Vector(World.width / 2, World.height / 2) : World.getRandomCoord();\n\n    let creature = new Creature(coord, isPlayer);\n    Creature.list.push(creature);\n    return creature;\n  }\n\n  public static kill(creature: Creature){\n    let index = Creature.list.findIndex((item) => {\n      return creature.id === item.id;\n    });\n    Creature.list.splice(index, 1);\n  }\n\n  public process() {\n    this.patrons.forEach((patron) => patron.process());\n    if (this.isPlayer) {\n      this._processPlayer();\n    }\n    if (this.isBot) {\n      this._processBot();\n    }\n\n   this._processDamage();\n\n    this._checkLevel();\n    this._draw();\n  }\n\n  private _processDamage(){\n    //Перебор по всем сущностям, нанесение урона при таране\n    let damageCreatures = Creature.list.filter((creature) => {\n      let distance = this.physics.location.dist(creature.physics.location);\n      let minDistance = creature.physics.mass * 10 + this.physics.mass * 10;\n      return (distance < minDistance && this.id != creature.id);\n    });\n\n    damageCreatures.forEach((creature) => {\n      var diff = this.physics.location.copy().sub(creature.physics.location);\n      diff.normalize();\n      diff.mul(3);\n      this._applyForce(diff);\n\n      this.damage(Math.round(creature.physics.mass * 10  + Math.random() * 5));\n    });\n  }\n\n  private _fire(){\n    this.patrons.push(new Patron(this));\n  }\n\n  public removePatron(patron: Patron){\n    let index = this.patrons.findIndex((item) => {\n      return patron.id === item.id;\n    });\n    this.patrons.splice(index, 1);\n  }\n\n  private _processPlayer(){\n    //Перебор по всем целям, расчет вхождения\n    let eating = Food.list.filter((food) => {\n      let distance = this.physics.location.dist(food.physics.location);\n      return (distance < food.physics.size + this.physics.mass * 10);\n    });\n\n    eating.forEach((food) => {\n      this.experience += food.experience;\n      Food.kill(food);\n      Food.add();\n    });\n    //\n    // if(this.physics.location.x - World.width/2 < 0){\n    //   this.physics.location.x = World.width/2;\n    // }\n    // if(this.physics.location.y - World.height/2 < 0){\n    //   this.physics.location.y = World.height/2;\n    // }\n    // if(this.physics.location.x + this.physics.mass * 10 / 2 > World.width){\n    //   this.physics.location.x = World.width - this.width/2;\n    // }\n    // if(this.physics.location.y + this.physics.mass * 10 / 2 > World.height){\n    //   this.physics.location.y = World.height - this.height/2;\n    // }\n  }\n\n  private _processBot(){\n    if (this.targetFood) {\n      let distance = this.physics.location.dist(this.targetFood.physics.location);\n      if (distance < this.targetFood.physics.size * 2){\n        this.experience += this.targetFood.experience;\n        Food.kill(this.targetFood);\n        Food.add();\n      }\n    } else {\n      this._findTarget();\n    }\n\n    if (this.targetFood){\n      let coord = this.targetFood.physics.location;\n      this._moveTo(coord);\n    } else {\n      this._moveTo(World.getRandomCoord());\n    }\n\n  }\n\n  private _findTarget(){\n\n    //Перебор по всем целям, расчет вхождения\n    let looked = Food.list.filter((food) => {\n      let distance = this.physics.location.dist(food.physics.location);\n      return (distance < this.physics.lookRange);\n    });\n    if (looked.length) {\n      let sortLooked = looked.sort((a, b) => {\n        let aDist = this.physics.location.dist(a.physics.location);\n        let bDist = this.physics.location.dist(b.physics.location);\n        return aDist - bDist;\n      });\n      this.targetFood = sortLooked[0];\n      this.targetFood.addTargeting(this);\n    }\n  }\n\n  public control(keyPress:{ [key:number]:boolean; } ){\n    if (keyPress[KEYS.LEFT] || keyPress[KEYS.A]) {\n      this.physics.rotation.rotate(Vector.inRadAngle(-10));\n    }\n\n    if (keyPress[KEYS.UP]  || keyPress[KEYS.W]) {\n      this.physics.velocity.add(this.physics.rotation);\n    }\n\n    if (keyPress[KEYS.RIGHT]  || keyPress[KEYS.D]) {\n      this.physics.rotation.rotate(Vector.inRadAngle(10));\n    }\n\n    if (keyPress[KEYS.DOWN]  || keyPress[KEYS.S]) {\n      this.physics.velocity.sub(this.physics.rotation);\n    }\n\n    if (//default speed\n      !keyPress[KEYS.LEFT] && !keyPress[KEYS.A] &&\n      !keyPress[KEYS.UP]  && !keyPress[KEYS.W] &&\n      !keyPress[KEYS.RIGHT] && !keyPress[KEYS.D] &&\n      !keyPress[KEYS.DOWN] && !keyPress[KEYS.S])\n    {\n      this.physics.velocity.setMag(0.5);\n    }\n\n    if (keyPress[KEYS.SPACE]) {\n      this._fire();\n    }\n  }\n\n  private _moveTo(target: Vector) {\n    var force = new Vector(0,0);\n    var cohesion = this._seek(target);\n\n    force.add(cohesion);\n\n    this._applyForce(force);\n  }\n\n  private _draw() {\n    this._update();\n    let bgcolor = '#00CCFA';\n    let color = '#0066FA';\n    let percentHealth = this.health / this.maxHealth;\n    if (percentHealth < 0.3){\n      bgcolor = '#CC6666';\n      color = '#333333';\n    } else if (percentHealth < 0.6){\n      bgcolor = '#ffcc66';\n      color = '#cc8800';\n    }\n\n    var context = World.context;\n\n    var angle = this.physics.rotation.angle();\n\n    var viewX = this.physics.location.x + Math.cos(angle) * this.physics.mass * 11;\n    var viewY = this.physics.location.y + Math.sin(angle) * this.physics.mass * 11;\n\n    context.save();\n    context.beginPath();\n\n    context.fillStyle = bgcolor;\n    context.lineWidth = 1;\n    context.strokeStyle = color;\n\n    //bot\n    context.arc(World.convertX(this.physics.location.x), World.convertY(this.physics.location.y), this.physics.mass * 10, 0, 2 * Math.PI, false);\n    context.fill();\n\n    //move vector\n    context.moveTo(World.convertX(this.physics.location.x), World.convertY(this.physics.location.y));\n    context.lineTo(World.convertX(viewX), World.convertY(viewY));\n    context.stroke();\n\n    // context.fill();\n    context.closePath();\n    context.stroke();\n\n    context.globalAlpha = 1;\n    context.font=\"14px Tahome\";\n    context.fillStyle = 'black';\n    let x = World.convertX(this.physics.location.x + this.physics.mass * 10 + 10);\n    let y = World.convertY(this.physics.location.y + this.physics.mass * 10 + 10);\n    if (this.isBot){\n      World.context.fillText(\"Bot \" + this.level + \" level\", x, y);\n    }\n    if (this.isPlayer){\n      World.context.fillText(\"Player\", x, y);\n    }\n    World.context.fillText(\"Health: \" + this.health + '/' + this.maxHealth, x, y + 14);\n\n    context.restore() ;\n  }\n\n  private _update() {\n    this._boundaries();\n    this.physics.velocity.add(this.physics.acceleration);\n    this.physics.velocity.limit(this.physics.maxspeed);\n\n    this.physics.location.add(this.physics.velocity);\n    this.physics.acceleration.mul(0);\n  }\n\n  private _applyForce(force) {\n    this.physics.acceleration.add(force);\n    this.physics.rotation = this.physics.velocity;\n  }\n\n  private _boundaries() {\n    if (this.physics.location.x < 0)\n      this._applyForce(new Vector(this.physics.maxspeed, 0));\n\n    if (this.physics.location.x > World.width)\n      this._applyForce(new Vector(-this.physics.maxspeed, 0));\n\n    if (this.physics.location.y < 0)\n      this._applyForce(new Vector(0, this.physics.maxspeed));\n\n    if (this.physics.location.y > World.height)\n      this._applyForce(new Vector(0, -this.physics.maxspeed));\n\n  }\n\n  private _seek(target) {\n    var seek = target.copy().sub(this.physics.location);\n    seek.normalize();\n    seek.mul(this.physics.maxspeed);\n    seek.sub(this.physics.velocity).limit(0.3);\n\n    return seek;\n  }\n\n\n\n  private _checkLevel(){\n    let limit = 100;\n    if (this.experience >= limit && this.level < Creature.maxLevel) {\n      this.level++;\n      this.health += Math.round(this.level/3 * 20);\n      this.maxHealth += Math.round(this.level/3 * 20);\n      this.experience = 0;\n      this.physics.mass += 0.3;\n    }\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/creature.ts\n **/","import { WebpackAsyncRoute } from '@angularclass/webpack-toolkit';\nimport { RouterConfig } from '@angular/router';\nimport { Home } from './home';\nimport { Game } from './game';\nimport { NoContent } from './no-content';\n\nimport { DataResolver } from './app.resolver';\n\nexport const routes: RouterConfig = [\n  { path: '',      component: Home },\n  { path: 'home',  component: Home },\n  { path: 'game',  component: Game },\n  { path: '**',    component: NoContent },\n];\n\n// Async load a component using Webpack's require with es6-promise-loader and webpack `require`\n// asyncRoutes is needed for our @angularclass/webpack-toolkit that will allow us to resolve\n// the component correctly\n\nexport const asyncRoutes: AsyncRoutes = {\n  // we have to use the alternative syntax for es6-promise-loader to grab the routes\n  // 'Game': require('es6-promise-loader!./game'),\n};\n\n\n// Optimizations for initial loads\n// An array of callbacks to be invoked after bootstrap to prefetch async routes\nexport const prefetchRouteCallbacks: Array<IdleCallbacks> = [\n  // asyncRoutes['Game'],\n   // es6-promise-loader returns a function\n];\n\n\n// Es6PromiseLoader and AsyncRoutes interfaces are defined in custom-typings\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.routes.ts\n **/","import { Rectangle } from './rectangle';\nimport { Creature } from './creature';\nvar AXIS = {\n  NONE: \"none\",\n  HORIZONTAL: \"horizontal\",\n  VERTICAL: \"vertical\",\n  BOTH: \"both\"\n};\n\nexport class Camera {\n  xView: number = 0;\n  yView: number = 0;\n  xDeadZone: number = 0;\n  yDeadZone: number = 0;\n  wView: number;\n  hView: number;\n  axis: string = AXIS.BOTH;\n  followed: Creature;\n  viewportRect: Rectangle;\n  worldRect: Rectangle;\n\n  constructor(xView: number, yView: number, canvasWidth: number, canvasHeight: number, worldWidth: number, worldHeight: number){\n    // position of camera (left-top coordinate)\n    this.xView = xView || 0;\n    this.yView = yView || 0;\n\n    // distance from followed object to border before camera starts move\n    this.xDeadZone = 0; // min distance to horizontal borders\n    this.yDeadZone = 0; // min distance to vertical borders\n\n    // viewport dimensions\n    this.wView = canvasWidth;\n    this.hView = canvasHeight;\n\n    // allow camera to move in vertical and horizontal axis\n    this.axis = AXIS.BOTH;\n\n    // object that should be followed\n    this.followed = null;\n\n    // rectangle that represents the viewport\n    this.viewportRect = new Rectangle(this.xView, this.yView, this.wView, this.hView);\n\n    // rectangle that represents the world's boundary (room's boundary)\n    this.worldRect = new Rectangle(0, 0, worldWidth, worldHeight);\n  }\n\n  follow(creature: Creature, xDeadZone:number, yDeadZone:number) {\n    this.followed = creature;\n    this.xDeadZone = xDeadZone;\n    this.yDeadZone = yDeadZone;\n  }\n\n  update() {\n    // keep following the player (or other desired object)\n    if(this.followed != null)\n    {\n      let location = this.followed.physics.location;\n      if(this.axis == AXIS.HORIZONTAL || this.axis == AXIS.BOTH)\n      {\n        // moves camera on horizontal axis based on followed object position\n        if(location.x - this.xView  + this.xDeadZone > this.wView)\n          this.xView = location.x - (this.wView - this.xDeadZone);\n        else if(location.x  - this.xDeadZone < this.xView)\n          this.xView = location.x  - this.xDeadZone;\n\n      }\n      if(this.axis == AXIS.VERTICAL || this.axis == AXIS.BOTH)\n      {\n        // moves camera on vertical axis based on followed object position\n        if(location.y - this.yView + this.yDeadZone > this.hView)\n          this.yView = location.y - (this.hView - this.yDeadZone);\n        else if(location.y - this.yDeadZone < this.yView)\n          this.yView = location.y - this.yDeadZone;\n      }\n\n    }\n\n    // update viewportRect\n    this.viewportRect.set(this.xView, this.yView);\n\n    // don't let camera leaves the world's boundary\n    if(!this.viewportRect.within(this.worldRect))\n    {\n      if(this.viewportRect.left < this.worldRect.left)\n        this.xView = this.worldRect.left;\n      if(this.viewportRect.top < this.worldRect.top)\n        this.yView = this.worldRect.top;\n      if(this.viewportRect.right > this.worldRect.right)\n        this.xView = this.worldRect.right - this.wView;\n      if(this.viewportRect.bottom > this.worldRect.bottom)\n        this.yView = this.worldRect.bottom - this.hView;\n    }\n\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/camera.ts\n **/","import { Vector } from './vector';\nimport { Creature } from './creature';\nimport { World } from './world';\nimport { Food } from './food';\n\nexport class Patron {\n  public type: string;\n  public physics = {\n    location:  new Vector(0, 0),\n    velocity:  new Vector(0, 0),\n    mass: 1,\n    maxspeed: 10,\n    size: 700\n  };\n\n  public static counter = 0;\n  public id;\n  public owner:Creature;\n\n  constructor(owner: Creature){\n    Patron.counter++;\n    this.owner = owner;\n    this.id = Patron.counter;\n    this.physics.location = owner.physics.location.copy();\n    let velocity = owner.physics.rotation.copy();\n    let vAngle = velocity.angle() + Math.random() * 0.3;\n    velocity.setAngle(vAngle);\n    this.physics.velocity = velocity;\n    this.physics.velocity.limit(this.physics.maxspeed);\n    this.physics.velocity.setMag(10);\n\n  }\n\n  public process() {\n    //Перебор по всем целям, расчет вхождения\n    let eating = Food.list.filter((food) => {\n      let distance = this.physics.location.dist(food.physics.location);\n      return (distance < food.physics.size + this.physics.mass * 10);\n    });\n    eating.forEach((food) => {\n      this.owner.experience += food.experience;\n      Food.kill(food);\n      this.owner.removePatron(this);\n    });\n\n    this.draw();\n  }\n\n  public draw() {\n    this._update();\n\n    let color = '#990000';\n    let bgcolor = '#FAC6C6';\n\n    var context = World.context;\n\n    context.save();\n    context.beginPath();\n\n    context.fillStyle = bgcolor;\n    context.lineWidth = 1;\n    context.strokeStyle = color;\n\n    //bot\n    context.arc(this.physics.location.x, this.physics.location.y, 2, 0, 2 * Math.PI, false);\n    context.fill();\n\n    //move vector\n\n\n    context.globalAlpha = 1;\n    context.restore() ;\n  }\n\n  private _update() {\n    this.physics.location.add(this.physics.velocity);\n    this._checkOut();\n  }\n\n  private _checkOut() {\n    if (\n      this.physics.location.x < 0 ||\n      this.physics.location.x > World.width ||\n      this.physics.location.y < 0 ||\n      this.physics.location.y > World.height\n    ) {\n      this.owner.removePatron(this);\n    }\n\n  }\n\n  private _seek(target) {\n    var seek = target.copy().sub(this.physics.location);\n    seek.normalize();\n    seek.mul(this.physics.maxspeed);\n    seek.sub(this.physics.velocity).limit(0.3);\n\n    return seek;\n  }\n\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/patron.ts\n **/","export class Rectangle {\n  left:number;\n  top:number;\n  width:number;\n  height:number;\n  right:number;\n  bottom:number;\n\n  constructor(left?: number, top?: number, width?: number, height?: number){\n    this.left = left|| 0;\n    this.top = top || 0;\n    this.width = width || 0;\n    this.height = height || 0;\n    this.right = this.left + this.width;\n    this.bottom = this.top + this.height;\n  }\n\n  set(left:number, top:number, width?: number, height?: number) {\n    this.left = left;\n    this.top = top;\n    this.width = width || this.width;\n    this.height = height || this.height;\n    this.right = (this.left + this.width);\n    this.bottom = (this.top + this.height);\n  }\n\n  within(r:Rectangle) {\n    return (r.left <= this.left &&\n      r.right >= this.right &&\n      r.top <= this.top &&\n      r.bottom >= this.bottom);\n  }\n\n  overlaps(r:Rectangle) {\n    return (this.left < r.right &&\n      r.left < this.right &&\n      this.top < r.bottom &&\n      r.top < this.bottom);\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/rectangle.ts\n **/","/*\n * These are globally available directives in any template\n */\n// Angular 2\nimport { PLATFORM_DIRECTIVES } from '@angular/core';\n// Angular 2 Router\nimport { ROUTER_DIRECTIVES } from '@angular/router';\n// Angular 2 forms\nimport { REACTIVE_FORM_DIRECTIVES } from '@angular/forms';\n\n// application_directives: directives that are global through out the application\nexport const APPLICATION_DIRECTIVES = [\n  ...ROUTER_DIRECTIVES,\n  ...REACTIVE_FORM_DIRECTIVES\n];\n\nexport const DIRECTIVES = [\n  { provide: PLATFORM_DIRECTIVES, multi: true, useValue: APPLICATION_DIRECTIVES }\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/platform/browser-directives.ts\n **/","/*\n * These are globally available pipes in any template\n */\n\nimport { PLATFORM_PIPES } from '@angular/core';\n\n// application_pipes: pipes that are global through out the application\nexport const APPLICATION_PIPES = [\n\n];\n\nexport const PIPES = [\n  { provide: PLATFORM_PIPES, multi: true, useValue: APPLICATION_PIPES }\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/platform/browser-pipes.ts\n **/","/*\n * These are globally available services in any component or any other service\n */\n\n// Angular 2\nimport { HashLocationStrategy, LocationStrategy } from '@angular/common';\n// Angular 2 Http\nimport { HTTP_PROVIDERS } from '@angular/http';\n// Angular 2 Router\nimport { provideRouter } from '@angular/router';\n// Angular 2 forms\nimport { disableDeprecatedForms, provideForms } from '@angular/forms';\n\n// AngularClass\nimport { provideWebpack } from '@angularclass/webpack-toolkit';\nimport { providePrefetchIdleCallbacks } from '@angularclass/request-idle-callback';\n\n\nimport { routes, asyncRoutes, prefetchRouteCallbacks } from '../app/app.routes';\nimport { APP_RESOLVER_PROVIDERS } from '../app/app.resolver';\n/*\n* Application Providers/Directives/Pipes\n* providers/directives/pipes that only live in our browser environment\n*/\nexport const APPLICATION_PROVIDERS = [\n  // new Angular 2 forms\n  disableDeprecatedForms(),\n  provideForms(),\n\n  ...APP_RESOLVER_PROVIDERS,\n\n  provideRouter(routes),\n  provideWebpack(asyncRoutes),\n  providePrefetchIdleCallbacks(prefetchRouteCallbacks),\n\n  ...HTTP_PROVIDERS,\n\n  { provide: LocationStrategy, useClass: HashLocationStrategy }\n];\n\nexport const PROVIDERS = [\n  ...APPLICATION_PROVIDERS\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/platform/browser-providers.ts\n **/","/*\n * Angular 2 decorators and services\n */\nimport { Component, ViewEncapsulation } from '@angular/core';\n\nimport { AppState } from './app.service';\n\n/*\n * App Component\n * Top Level Component\n */\n@Component({\n  selector: 'app',\n  encapsulation: ViewEncapsulation.None,\n  styles: [\n    require('./app.style.css')\n  ],\n  template: `\n    <main>\n      <router-outlet></router-outlet>\n    </main>\n\n    <!--<pre class=\"app-state\">this.appState.state = {{ appState.state | json }}</pre>-->\n  `\n})\nexport class App {\n  angularclassLogo = 'assets/img/angularclass-avatar.png';\n  name = 'Angular 2 Webpack Starter';\n  url = 'https://twitter.com/AngularClass';\n\n  constructor(\n    public appState: AppState) {\n\n  }\n\n  ngOnInit() {\n    console.log('Initial App State', this.appState.state);\n  }\n\n}\n\n/*\n * Please review the https://github.com/AngularClass/angular2-examples/ repo for\n * more angular app examples that you may copy/paste\n * (The examples may not be updated as quickly. Please open an issue on github for us to update it)\n * For help or questions please contact us at @AngularClass on twitter\n * or our chat on Slack at https://AngularClass.com/slack-join\n */\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.component.ts\n **/","import { Resolve, ActivatedRouteSnapshot, RouterStateSnapshot } from '@angular/router';\nimport { Injectable } from '@angular/core';\nimport { Observable } from 'rxjs/Observable';\nimport 'rxjs/add/observable/of';\n\n@Injectable()\nexport class DataResolver implements Resolve<any> {\n  constructor() {\n\n  }\n  resolve(route: ActivatedRouteSnapshot, state: RouterStateSnapshot) {\n    return Observable.of({ res: 'I am data'});\n  }\n}\n\n// an array of services to resolve routes with data\nexport const APP_RESOLVER_PROVIDERS = [\n  DataResolver\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/app.resolver.ts\n **/","export * from './creature';\nexport * from './patron';\nexport * from './food';\nexport * from './world';\nexport * from './camera';\nexport * from './vector';\nexport * from './rectangle';\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/entities/index.ts\n **/","import {Component, ViewChild, ElementRef, Input} from '@angular/core';\nimport {AppState} from '../app.service';\nimport {Router} from '@angular/router';\nimport {Creature, World} from './entities';\n\n@Component({\n  selector: 'game',\n  styles: [require('./game.style.css')],\n  template: require('./game.template.html'),\n  host: {\n    '(document:keyup)': '_keyup($event)',\n    '(document:keydown)': '_keydown($event)',\n  },\n})\n\nexport class Game {\n  @ViewChild(\"gameCanvas\") gameCanvas:ElementRef;\n\n  static context:CanvasRenderingContext2D;\n\n  // public creatures:Array<Creature> = World.creatures;\n  private fps = 30;\n  public keyPress:{ [key:number]:boolean; } = {};\n  public canvasWidth: number = World.canvasWidth;\n  public canvasHeight: number = World.canvasHeight;\n\n  constructor(public element:ElementRef, private router:Router, public appState:AppState,) {\n    //debug\n    this.appState.set('nickname', 'test');\n  }\n\n  ngAfterViewInit() { // wait for the view to init before using the element\n\n    let nickname = this.appState.get('nickname');\n    if (typeof nickname !== \"string\") {\n      return this.router.navigate(['']);\n    }\n    let context = this.gameCanvas.nativeElement.getContext(\"2d\");\n    World.setContext(context);\n\n    World.init();\n\n    let then = Date.now();\n    this.animate(then);\n  }\n\n  animate(then) {\n    let fpsInterval = 1000 / this.fps;\n    requestAnimationFrame(() => {\n      this.animate(then);\n    });\n\n    let now = Date.now();\n    let elapsed = now - then;\n\n    if (elapsed > fpsInterval) {\n      then = now - (elapsed % fpsInterval);\n      Creature.active.control(this.keyPress);\n      World.camera.update();\n      World.draw();\n    }\n  }\n\n  private _keydown(event:KeyboardEvent) {\n    this.keyPress[event.keyCode] = true;\n  }\n\n  private _keyup(event:KeyboardEvent) {\n    this.keyPress[event.keyCode] = false;\n  }\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/game.component.ts\n **/","export * from './game.component';\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/game/index.ts\n **/","import { Component } from '@angular/core';\n\nimport { AppState } from '../app.service';\nimport { Router } from '@angular/router';\n\n@Component({\n  selector: 'home',  // <home></home>\n  styles: [ require('./home.style.css') ],\n  template: require('./home.template.html')\n})\nexport class Home {\n  localState = { nickname: '' };\n  constructor(public appState: AppState,  private router: Router) {\n\n  }\n\n  ngOnInit() {\n    console.log('hello `Home` component');\n    // this.title.getData().subscribe(data => this.data = data);\n  }\n\n  submitState(value) {\n    this.appState.set('nickname', value);\n    this.localState.nickname = '';\n\n    this.router.navigate(['game']);\n  }\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/home/home.component.ts\n **/","export * from './home.component';\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/home/index.ts\n **/","// App\nexport * from './app.component';\nexport * from './app.service';\nexport * from './app.routes';\n\nimport { AppState } from './app.service';\n\n// Application wide providers\nexport const APP_PROVIDERS = [\n  AppState\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/index.ts\n **/","export * from './no-content';\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/no-content/index.ts\n **/","import { Component } from '@angular/core';\n\n@Component({\n  selector: 'no-content',\n  template: `\n    <div>\n      <h1>404: page missing</h1>\n    </div>\n  `\n})\nexport class NoContent {\n\n}\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/app/no-content/no-content.ts\n **/","export * from './browser-directives';\nexport * from './browser-pipes';\nexport * from './browser-providers';\n\nimport { DIRECTIVES } from './browser-directives';\nimport { PIPES } from './browser-pipes';\nimport { PROVIDERS } from './browser-providers';\n\n\nexport const PLATFORM_PROVIDERS = [\n  ...PROVIDERS,\n  ...DIRECTIVES,\n  ...PIPES\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/platform/browser.ts\n **/","\n// Angular 2\n// rc2 workaround\nimport { enableDebugTools, disableDebugTools } from '@angular/platform-browser';\nimport { enableProdMode } from '@angular/core';\n// Environment Providers\nlet PROVIDERS = [\n  // common env directives\n];\n\n// Angular debug tools in the dev console\n// https://github.com/angular/angular/blob/86405345b781a9dc2438c0fbe3e9409245647019/TOOLS_JS.md\nlet _decorateComponentRef = function identity(value) { return value; };\n\nif ('production' === ENV) {\n  // Production\n  disableDebugTools();\n  enableProdMode();\n\n  PROVIDERS = [\n    ...PROVIDERS,\n    // custom providers in production\n  ];\n\n} else {\n\n  _decorateComponentRef = (cmpRef) => {\n    let _ng = (<any>window).ng;\n    enableDebugTools(cmpRef);\n    (<any>window).ng.probe = _ng.probe;\n    (<any>window).ng.coreTokens = _ng.coreTokens;\n    return cmpRef;\n  };\n\n  // Development\n  PROVIDERS = [\n    ...PROVIDERS,\n    // custom providers in development\n  ];\n\n}\n\nexport const decorateComponentRef = _decorateComponentRef;\n\nexport const ENV_PROVIDERS = [\n  ...PROVIDERS\n];\n\n\n\n/** WEBPACK FOOTER **\n ** node_modules/angular2-template-loader!./src/platform/environment.ts\n **/","module.exports = \"<div class=\\\"card-container\\\">\\n  <div id=\\\"container\\\">\\n    <canvas #gameCanvas [width]=\\\"canvasWidth\\\" [height]=\\\"canvasHeight\\\"></canvas>\\n  </div>\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/game/game.template.html\n ** module id = 557\n ** module chunks = 2\n **/","module.exports = \"<div class=\\\"card-container\\\">\\n\\n  <div>\\n    <h4>Enter nickname</h4>\\n\\n    <form (ngSubmit)=\\\"submitState(localState.nickname)\\\" autocomplete=\\\"off\\\">\\n      <input type=\\\"text\\\" name=\\\"textInput\\\" [(ngModel)]=\\\"localState.nickname\\\" autofocus>\\n\\n      <button md-raised-button color=\\\"primary\\\">Login</button>\\n    </form>\\n\\n  </div>\\n\\n</div>\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/home/home.template.html\n ** module id = 558\n ** module chunks = 2\n **/","\"use strict\";\nvar Observable_1 = require('../../Observable');\nvar of_1 = require('../../observable/of');\nObservable_1.Observable.of = of_1.of;\n//# sourceMappingURL=of.js.map\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./~/rxjs/add/observable/of.js\n ** module id = 566\n ** module chunks = 2\n **/","module.exports = \"body{\\n  margin: 0;\\n  overflow: hidden;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/app.style.css\n ** module id = 762\n ** module chunks = 2\n **/","module.exports = \"/*styles for game content only*/\\n\\n#canvas{\\n  border: 1px solid blue;\\n}\\n#state{\\n  float: left;\\n  width: 40%;\\n}\\n#render{\\n  float: left;\\n  width: 60%;\\n}\\n\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/game/game.style.css\n ** module id = 763\n ** module chunks = 2\n **/","module.exports = \"/*styles for home content only*/\"\n\n\n/*****************\n ** WEBPACK FOOTER\n ** ./src/app/home/home.style.css\n ** module id = 764\n ** module chunks = 2\n **/"],"mappings":";;;;;;;AAAA;;AAEA;AACA;AACA;;;AAGA;AACA;AACA;AAGA;;;AAGA;AACA;AAEA;;;AAGA;AACA;AAEA;AAMA;AACA;AAEA;AAXA;AAiBA;;;;;AAKA;AAGA;;;AAGA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;;;;;;;;;AC1DA;AACA;AAGA;AAIA;AAHA;AACA;AAIA;AAGA;AADA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;;AAJA;AAMA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAGA;AACA;AACA;AACA;AA9BA;AAAA;;AAAA;AAHA;AAAA;;AAAA;AAkCA;AAAA;AAjCA;;;;;;;;;ACJA;AAKA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AAEA;AAAA;AA5IA;;;;;;;;;ACAA;AACA;AACA;AAEA;AAcA;AAXA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;AAvGA;AASA;AA+FA;AAAA;AAzGA;;;;;;;;;ACJA;AACA;AACA;AACA;AAEA;AAAA;AAsHA;AAvGA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAGA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAlHA;AACA;AAEA;AACA;AAEA;AACA;AAGA;AAyGA;AAAA;AAtHA;;;;;;;;;ACLA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AA4BA;AAAA;AAxBA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAKA;AAMA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AACA;AACA;AACA;AAAA;AACA;AACA;AAEA;AAEA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AACA;AACA;AACA;AAEA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AA5TA;AAwBA;AACA;AAoSA;AAAA;AA9TA;;;;;;;;;ACfA;AACA;AACA;AAIA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAMA;AACA;AACA;AAMA;;;;;;;;;ACjCA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAYA;AAXA;AACA;AACA;AACA;AAGA;AAMA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AAvFA;;;;;;;;;ACTA;AAEA;AACA;AAEA;AAcA;AAZA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AAEA;AAGA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AAEA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AAEA;AACA;AAnFA;AAsFA;AAAA;AAhGA;;;;;;;;;ACLA;AAQA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA;AAvCA;;;;;;;;;ACAA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AACA;AACA;;;;;;;;AClBA;;AAEA;;AAEA;AAEA;AACA;AAIA;AACA;AACA;;;;;;;;ACbA;;AAEA;;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAGA;AACA;AACA;;;AAGA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAEA;AACA;AAEA;;;;;;;;;ACxCA;;AAEA;AACA;AAEA;AAEA;;;AAGA;AAeA;AAKA;AACA;AALA;AACA;AACA;AAKA;AAEA;AACA;AACA;AA1BA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AAOA;;AAAA;AAeA;;AAAA;AAdA;AAgBA;;;;;;AAMA;;;;;;;;;AC9CA;AACA;AACA;AAGA;AACA;AAEA;AACA;AACA;AACA;AAPA;AAAA;;AAAA;AAQA;AAAA;AAPA;AASA;AACA;AACA;AACA;;;;;;;;;;;;AClBA;AACA;AACA;AACA;AACA;AACA;AACA;;;;;;;;;ACNA;AACA;AACA;AACA;AAYA;AAWA;AAAA;AAAA;AAAA;AANA;AACA;AACA;AACA;AACA;AAGA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AAEA;AAAA;AACA;AACA;AACA;AACA;AAEA;AACA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AACA;AArDA;AAAA;;AAAA;AAXA;AAAA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;AAAA;AAyDA;;AAAA;AAvDA;;;;;;;;;;;;ACfA;;;;;;;;;ACAA;AAEA;AACA;AAOA;AAEA;AAAA;AAAA;AADA;AAGA;AAEA;AACA;AACA;AACA;AAEA;AACA;AACA;AAEA;AACA;AArBA;AAAA;AACA;AACA;AACA;AACA;;AAAA;AAmBA;;AAAA;AAlBA;;;;;;;;;;;;ACVA;;;;;;;;;;;;ACAA;AACA;AACA;AACA;AAEA;AAEA;AACA;AACA;AACA;;;;;;;;;;;;ACVA;;;;;;;;;ACAA;AAUA;AAAA;AAEA;AAVA;AAAA;AACA;AACA;AAKA;;AAAA;AAGA;AAAA;AAFA;;;;;;;;;;;;ACVA;AACA;AACA;AAEA;AACA;AACA;AAGA;;;;;;;;;ACRA;AACA;AACA;AACA;AACA;AACA;AAIA;AACA;AACA;AAEA;AACA;AACA;AACA;AAEA;AAKA;AAAA;AAEA;AACA;AACA;AACA;AACA;AACA;AACA;AAEA;AACA;AAKA;AAEA;AAEA;;;;;;;;AC5CA;;;;;;;ACAA;;;;;;;ACAA;AACA;AACA;AACA;AACA;;;;;;;ACJA;;;;;;;ACAA;;;;;;;ACAA;;;;","sourceRoot":""}